% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_protpqn.R
\name{apply_protpqn}
\alias{apply_protpqn}
\title{Apply ProtPQN}
\usage{
apply_protpqn(
  data_in,
  transform = TRUE,
  log_base = 2,
  kitwise = TRUE,
  long_format = TRUE,
  kit_key = NULL
)
}
\arguments{
\item{data_in}{Data frame containing protein measurement values to be normalized.
If the data is in long format, it requires columns named 'sample_id' containing sample identifiers,
'protein' with protein names, 'value' with the values to normalize, and 'kit' with identifiers for kits/panel the proteins are from.
If the data is in wide format, it requires a column named 'sample_id' for sample identifiers,
and one column for each protein measured containing the values.}

\item{transform}{Logical. If TRUE, the incoming log-scale data is transformed before normalization and then converted back to log-scale after.}

\item{log_base}{Numeric of length 1. The base to use when transforming from and to log-scale if transform is TRUE. Default is 2.}

\item{kitwise}{Logical. If TRUE, normalization is performed kit-wise.}

\item{long_format}{Logical. If TRUE, the input data is in long format.}

\item{kit_key}{Data frame containing the kit/panel information for each protein. Required if long_format is FALSE, i.e. data is in wide format.}
}
\value{
A data frame containing normalized protein values in the same format as input.
}
\description{
Apply ProtPQN to wide or long format data with options for data transformation from log and protein kit/panel-wise normalization.
}
\examples{
# Wide format input example:
# Without kit information
protein_data <- replicate(50, rnorm(100, 10, 1)) |> as.data.frame() |> log2()
proteins <- paste0("p", 1:50)
colnames(protein_data) <- proteins
protein_data$sample_id <- paste0("s", 1:100)
protein_data <- protein_data[, c(ncol(protein_data), 1:(ncol(protein_data)-1))]
normalized_data <- apply_protpqn(protein_data,
                                 transform = TRUE,
                                 kitwise = FALSE,
                                 long_format = FALSE)
# With kit information
kit_info <- data.frame("protein" = proteins,
                       "kit" = rep(c("kitA", "kitB"), each = length(proteins)/2))

normalized_data <- apply_protpqn(protein_data, transform = TRUE, kitwise = TRUE,
                                 long_format = FALSE, kit_key = kit_info)

# For long format input:
protein_data_long <- data.frame("sample_id" = rep(paste0("s", 1:100), 50),
                                "protein" = rep(paste0("p", 1:50), each = 100),
                                "value" = log2(rnorm(100*50, 10, 1)),
                                "kit" = rep(c("kitA", "kitB"), each = 50*100/2))
normalized_data_long <- apply_protpqn(protein_data_long,
                                      transform = TRUE,
                                      kitwise = TRUE,
                                      long_format = TRUE)
}
